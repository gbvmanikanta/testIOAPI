from flask import  make_response, request
from flask_restx import Resource
import os, re
from swagger.swagger import vulnerability_ns as vuln
from swagger.swagger import analysis_model, approve_model
from datetime import datetime, timedelta, timezone
from utils.utils import run_test_case
import base64
rootpath =r"C:\Workspace\AI_Workspace\Project"
output_dir = r"C:\Workspace\AI_Workspace"
testcase_path = r"C:\Workspace\AI_Workspace\Project\Testcases"

@vuln.route('')
class RunTests(Resource):
    @vuln.expect(analysis_model)
    def get(self):
        # data = request.json
        # num_test_cases = data['num_test_cases']
        # base_java_url = data['base_java_url']
        # base_xml_url = data['base_xml_url']
        path = request.args.get('path')
        local_path = os.path.join(rootpath, path)
        base_java_url = local_path
        print("FIle Path", base_java_url)
        xml_path = os.path.join(testcase_path, path)
        base_xml_url = xml_path.replace(".py", ".xml")
        print("XML Path", base_xml_url)
        num_test_cases = ''.join(re.findall(r'\d+', os.path.basename(base_java_url)))
        results = run_test_case(num_test_cases, base_java_url, base_xml_url)

        # response = {
        #     "code": results['code'],
        #     "vulnerability found": results["vulnerability found"],
        #     "vulnerability_type_matches": results["vulnerability_type_matches"],
        #     "metadata_vulnerability_exists": results["metadata_vulnerability_exists"],
        #     "vulnerability": results["vulnerability"],
        #     "expected_vuln_type": results["expected_vuln_type"],
        #     "vulnerable code": results["vulnerable code"],
        #     "code fix": results["code fix"],
        #     "comment": results["comment"]
        #
        # }

        # file_name = "results-" + llm_model + "-temperature" + str(temperature) + "-benchmark-datetime-" + benchmark_datetime + ".csv"
        # TP, TN, FP, FN = analyze_results(file_name)
        # response['code'] = response['code'].encode('utf-8')
        # print(response)
        return results

@vuln.route('/approve')
class ApproveCode(Resource):
    @vuln.expect(approve_model)
    def put(self):
        data = request.get_json()
        local_path = data.get('path')
        path = os.path.join(rootpath, local_path)
        print(path)
        new_content = data.get('content')
        print(new_content)

        if not path:
            return {"error": "No file path provided"}, 400

        if not os.path.exists(path):
            return {"error": "File not found"}, 404

        if not os.path.isfile(path):
            return {"error": "Path is not a file"}, 400

        if new_content is None:
            return {"error": "No content provided"}, 400

        try:
            with open(path, 'w') as file:
                file.write(new_content)
            print()
            return {"message": "File updated successfully"}, 200
        except Exception as e:
            return {"error": str(e)}, 500

